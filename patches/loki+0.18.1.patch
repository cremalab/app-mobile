diff --git a/node_modules/loki/src/targets/native/create-websocket-target.js b/node_modules/loki/src/targets/native/create-websocket-target.js
index e111f7b..51fca55 100644
--- a/node_modules/loki/src/targets/native/create-websocket-target.js
+++ b/node_modules/loki/src/targets/native/create-websocket-target.js
@@ -7,6 +7,31 @@ const { withTimeout, withRetries } = require('../../failure-handling');
 const MESSAGE_PREFIX = 'loki:';
 const NATIVE_ERROR_TYPE = `${MESSAGE_PREFIX}error`;
 
+const sanitize = string => {
+  return (
+    string
+      .toLowerCase()
+      // eslint-disable-next-line no-useless-escape
+      .replace(/[ ’–—―′¿'`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/gi, '-')
+      .replace(/-+/g, '-')
+      .replace(/^-+/, '')
+      .replace(/-+$/, '')
+  );
+};
+
+const sanitizeSafe = (string, part) => {
+  const sanitized = sanitize(string);
+  if (sanitized === '') {
+    throw new Error(
+      `Invalid ${part} '${string}', must include alphanumeric characters`
+    );
+  }
+  return sanitized;
+};
+
+const toId = (kind, name) =>
+  `${sanitizeSafe(kind, 'kind')}--${sanitizeSafe(name, 'name')}`;
+
 function createWebsocketTarget(socketUri, platform, saveScreenshotToFile) {
   let socket;
   const messageQueue = createMessageQueue(NATIVE_ERROR_TYPE);
@@ -122,8 +147,10 @@ function createWebsocketTarget(socketUri, platform, saveScreenshotToFile) {
       await prepare();
       lastStoryCrashed = false;
     }
-    debug('captureScreenshotForStory', kind, story);
+    const storyId = toId(kind, story);
     send('setCurrentStory', { kind, story });
+    debug('captureScreenshotForStory', kind, story, storyId);
+    send('setCurrentStory', { kind, story, storyId });
     try {
       await waitForLokiMessage('ready', 30000);
     } catch (error) {
